package rectsNdots;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JPanel;
import java.awt.Toolkit;
import java.awt.Font;
import javax.swing.JOptionPane;
import java.awt.event.*;
public class AnimBoard extends JPanel implements Runnable, KeyListener{
    private Thread animator;
    private final int DELAY = 5;
    private final int s = 100;
    private Rect player = new Rect();
    private Dot[] dots = new Dot[1000];
    private int score = 0;
    public AnimBoard(){
        super();
        setBackground(Color.BLACK);
        setFocusable(true);
        addKeyListener(this);
        Dimension d = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setPreferredSize(d);
        for(int i = 0; i < dots.length; i++){
            dots[i] = new Dot();
            System.out.println(dots[i].getX());
        }
        for(Dot i : dots){
            System.out.println(i.getX() + ", " + i.getY() +", " + i.getSize() + ", " + i.getColor());
        }
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        
        g2d.setColor(Color.YELLOW);
        for(int i = 0; i < dots.length; i++){
            if(dots[i] != null) {
                g2d.fillRect(dots[i].getX(),dots[i].getY(), dots[i].getSize(), dots[i].getSize());
            }
        }
        g2d.setColor(Color.BLUE);
        g2d.fill(player.getRect());
        g2d.setColor(Color.WHITE);
        g2d.setFont(new Font("Times New Roman", Font.PLAIN, 30));
        g2d.drawString("Score: " + String.valueOf(score), 150, 100);
        Toolkit.getDefaultToolkit().sync();
    }
    public void keyTyped(KeyEvent key){ } 
    public void keyReleased(KeyEvent key){
        if (key.getKeyCode() == KeyEvent.VK_A) {
            player.modifyX(0);
        }

        if (key.getKeyCode() == KeyEvent.VK_S) {
            player.modifyX(0);
        }

        if (key.getKeyCode() == KeyEvent.VK_D) {
            player.modifyY(0);
        }

        if (key.getKeyCode() == KeyEvent.VK_W) {
            player.modifyY(0);
        }
    }
    public void keyPressed(KeyEvent key){
        if(key.getKeyCode() == KeyEvent.VK_A){
            player.setX(player.getX()-s);
        }
        if(key.getKeyCode() == KeyEvent.VK_S){
            player.setY(player.getY()+s);
        }
        if(key.getKeyCode() == KeyEvent.VK_D){
            player.setX(player.getX()+s);
        }
        if(key.getKeyCode() == KeyEvent.VK_W){
            player.setY(player.getY()-s);
        }
        if(key.getKeyCode() == KeyEvent.VK_Q) {
            if(player.getSize()>20) {
                player.setSize(player.getSize()-10);
            }
        }
        if(key.getKeyCode() == KeyEvent.VK_E) {
            if(player.getSize() < 2000) {
                player.setSize(player.getSize()+10);
            }
        }
    }
    @Override
    public void addNotify(){
        super.addNotify();
        animator = new Thread(this);
        animator.start();
    }
    public void check(){
        for(int i = 0; i < dots.length; i++){
            if(dots[i] != null){
                if((player.getRect()).intersects(dots[i].bounds())){
                    score++;
                    dots[i] = null;
                }
            }
        }
        if(player.getX() < -10) {
            player.setX(1);
        }
        if(player.getY() < -10) {
            player.setY(1);
        }
        if(player.getY() < 0 || player.getY() < 0){
            explode();
        }
        if(player.getY() > this.getHeight()-player.getSize() -10 || player.getX() > this.getWidth()-player.getSize()-5){
           deexplode(); 
        }
    }
    public void deexplode(){
        player.modifySize(-1);
        if(player.getSize() < 2){
            player.setSize(2);
        } 
        if(player.getY() > this.getHeight() -player.getSize() -5) {
            player.modifyY(1);
        }
    }
    public void explode(){
        player.modifySize(1);
    }
    @Override
    public void run(){
        long beforeTime, timeDiff, sleep;
        beforeTime = System.currentTimeMillis();
        while(true){
            repaint();
            check();
            timeDiff = System.currentTimeMillis() - beforeTime;
            sleep = DELAY - timeDiff;
            if(sleep < 0){
                sleep = 1;
            }
            try{
                Thread.sleep(sleep);
            } catch (InterruptedException e){
                String msg = String.format("Thread interrupted: %s", e.getMessage());
                JOptionPane.showMessageDialog(this,msg, "Error", JOptionPane.ERROR_MESSAGE);
            }
            beforeTime = System.currentTimeMillis();
        }
    }
}
