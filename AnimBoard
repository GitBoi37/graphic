import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import javax.swing.JPanel;
import java.awt.Toolkit;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.*;
import java.awt.event.*;
public class AnimBoard extends JPanel implements Runnable, KeyListener{
    private Thread animator;
    private final int DELAY = 25;
    private final int ROTATE = 5;
    private final int s = 10;
    private int x;
    private int y;
    private int rSize;
    private Dot[] dots;
    public AnimBoard(){
        super();
        setBackground(Color.BLACK);
        setPreferredSize(new Dimension(2000, 2000));
        setFocusable(true);
        addKeyListener(this);
        x = 0;
        y = 0;   
        rSize = 50;
        Dot[] dots = new Dot[50];
        for(int i = 0; i < dots.length; i++){
            dots[i] = new Dot();
            System.out.println(dots[i].getX());
        }
        for(Dot i : dots){
            System.out.println(i.getX() + ", " + i.getY() +", " + i.getSize() + ", " + i.getColor());
        }
    }
    public void explode(){
        rSize+=1;
    }
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.YELLOW);
        for(int i = 0; i < dots.length; i++){
            g2d.fillRect(dots[i].getX(),dots[i].getY(), dots[i].getSize(), dots[i].getSize());
        }
        g2d.setColor(Color.BLUE);
        g2d.fillRect(x, y, rSize, rSize);
        
        Toolkit.getDefaultToolkit().sync();
    }
    public void keyTyped(KeyEvent key){ } 
    public void keyReleased(KeyEvent key){
        if (key.getKeyCode() == key.VK_A) {
            x += 0;
        }

        if (key.getKeyCode() == key.VK_S) {
            x += 0;
        }

        if (key.getKeyCode() == key.VK_D) {
            y += 0;
        }

        if (key.getKeyCode() == key.VK_W) {
            y += 0;
        }
    }
    public void keyPressed(KeyEvent key){
        if(key.getKeyCode() == key.VK_A){
            x-=s;
        }
        if(key.getKeyCode() == key.VK_S){
            y+=s;
        }
        if(key.getKeyCode() == key.VK_D){
            x+=s;
        }
        if(key.getKeyCode() == key.VK_W){
            y-=s;
        }
    }
    @Override
    public void addNotify(){
        super.addNotify();
        animator = new Thread(this);
        animator.start();
    }
    public void check(){
        if(x < 0 || y < 0){
            explode();
        }
        if(y > 2000-rSize || x > 2000-rSize){
           deexplode(); 
        }
    }
    public void deexplode(){
        rSize-=1;
        if(rSize < 2){
            rSize = 2;
        }
    }
    @Override
    public void run(){
        long beforeTime, timeDiff, sleep;
        beforeTime = System.currentTimeMillis();
        while(true){
            repaint();
            check();
            timeDiff = System.currentTimeMillis();
            sleep = DELAY - timeDiff;
            if(sleep < 0){
                sleep = 2;
            }
            try{
                Thread.sleep(sleep);
            } catch (InterruptedException e){
                String msg = String.format("Thread interrupted: %s", e.getMessage());
                JOptionPane.showMessageDialog(this,msg, "Error", JOptionPane.ERROR_MESSAGE);
            }
            beforeTime = System.currentTimeMillis();
        }
    }
}
